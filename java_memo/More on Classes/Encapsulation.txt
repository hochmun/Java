Encapsulation 캡슐화

OOP에는 캡슐화encapsulation, 상속inheritance, 다형성polymorphism 및 추상화abstraction의 4가지 핵심 개념이 있습니다.
캡슐화의 기본 개념은 구현 세부 정보가 사용자에게 표시되지 않도록 하는 것입니다. 한 클래스의 변수는 현재 클래스의 메서드를 통해서만 액세스할 수 있는 다른 클래스에서 숨겨집니다. 이를 데이터 은닉이라고 합니다.
Java에서 캡슐화를 달성하려면 클래스의 변수를 private로 선언하고 변수 값을 수정하고 볼 수 있는 public setter 및 getter 메서드를 제공합니다.

예를 들어:
class BankAccount {
  private double balance=0;
  public void deposit(double x) {
    if(x > 0) {
      balance += x;
    }
  }
}

이 구현은 잔액balance 변수를 숨기고, 변수 를 수정하기 전에 예치할 금액을 확인하는 예금deposit 메서드 를 통해서만 해당 변수에 액세스할 수 있습니다.

요약하면 캡슐화 는 다음과 같은 이점을 제공합니다.
- 데이터 액세스 또는 수정 방식 제어
- 보다 유연하고 쉽게 코드 변경
- 다른 부분에 영향을 주지 않고 코드의 한 부분을 변경할 수 있는 기능

예문:
미술 학교 입학을 관리하는 프로그램이 필요합니다. 만 6세 이상이면 학교에 입학할 수 있습니다.
Pupil 클래스를 선언하는 프로그램이 제공됩니다.

Task
Pupil 클래스의 setAge 메소드를 완료하십시오. 매개변수 a의 값이 6보다 크면 age 속성에 할당하고 "Welcome"을 출력합니다.
그렇지 않으면 "죄송합니다"를 출력합니다.

Sample Input
7

Sample Output
Welcome

if 문을 사용하여 언급된 조건을 확인합니다.

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	    Scanner read = new Scanner(System.in);
	    int a = read.nextInt();
	    
	    Pupil pupil =  new Pupil();
            pupil.setAge(a);
	}
}

class Pupil{
    private int age;
    
    //complete setter method
    public void  setAge(int a){
       if ( a > 6 ) {
           System.out.println("Welcome");
       }
       else {
           System.out.println("Sorry");
       }
    }
    
    public int getAge(){
        return age;
    }
}