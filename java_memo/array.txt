array은 같은 유형의 변수 모음입니다 .
숫자와 같은 값 목록을 저장해야 하는 경우 각 숫자에 대해 별도의 변수를 선언하는 대신 배열에 저장할 수 있습니다. 배열을 선언하려면 대괄호 로 요소의 유형을 정의해야 합니다 . 예를 들어, 정수 배열을 선언하려면:

int[ ] arr;

배열의 이름은 arr 입니다. 보유할 요소의 유형은 int 입니다. 이제 어레이의 용량 또는 보유할 요소의 수를 정의해야 합니다. 이를 수행하려면 new 키워드를 사용하십시오.

int[ ] arr = new int[5];

위의 코드는 5개의 정수 배열을 선언합니다. 배열에서 요소는 순서가 지정되고 각각은 인덱스(index)
라고 하는 특정하고 일정한 위치를 갖습니다 . 배열의 요소를 참조하려면 배열 이름을 입력하고 대괄호 한 쌍 안에 인덱스 위치를 입력합니다. 

arr[2] = 42;

인덱스가 2인 요소에 값 42를 할당합니다.
배열의 요소는 0부터 시작하는 인덱스 번호로 식별되며, 이는 첫 번째 요소의 인덱스가 1이 아닌 0임을 의미합니다. 따라서 배열 int[5]의 최대 인덱스는 4입니다.

Java는 기본 유형 및 문자열의 배열을 인스턴스화하기 위한 바로 가기를 제공합니다.
배열에 삽입할 값을 이미 알고 있다면 배열 리터럴(array literal) 을 사용할 수 있습니다 .

배열 리터럴의 예:
public class Program {
    public static void main(String[] args) {
        String[ ] myNames = { "A", "B", "C", "D"};
        System.out.println(myNames[2]); // 출력 값 "C"
    }
}

중괄호로 묶인 쉼표로 구분된 목록 에 값을 배치합니다 . 위의 코드는 4개의 요소가 포함된 배열을 자동으로 초기화하고 제공된 값을 저장합니다.

경우에 따라 배열 이름 뒤에 대괄호가 배치되는 것을 볼 수 있습니다. 이 역시 작동하지만 선호하는 방법은 배열의 데이터 유형 뒤에 대괄호를 배치하는 것입니다.

Array 응용문제
public class Main {

   public static void main(String[] args) {
       String[] days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};

       for (int i = 0; i < 7; i++) {
           System.out.println(days[i]);
       }
   }
}

------------------------------------------------

Array length

length 속성 을 통해 배열의 길이(저장하는 요소의 수)에 액세스할 수 있습니다 .
예시:

public class Program {
    public static void main(String[] args) {
        int[ ] intArr = new int[5];
        System.out.println(intArr.length); // 출력 값 5
    }
}

이제 배열 요소를 설정하고 가져오는 방법을 알았으므로 루프를 사용하여 배열에 있는 모든 요소의 합을 계산할 수 있습니다. for 루프는 배열로 작업할 때 가장 많이 사용되는 루프입니다. 배열의 길이를 사용
하여 루프 를 실행할 횟수를 결정할 수 있기 때문입니다.

public class Program {
    public static void main(String[] args) {
        int [ ] myArr = {6, 42, 3, 7};
        int sum=0;
        for(int x=0; x<myArr.length; x++) {
            sum += myArr[x];
        }
        System.out.println(sum); // 58
    }
}

위의 코드에서 결과를 저장할 변수 sum 을 선언 하고 0을 할당했습니다.
그런 다음 for 루프를 사용하여 배열을 반복하고 각 요소의 값을 변수에 추가했습니다.

예문:
import java.util.Scanner;

public class Main {

   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       int length = scanner.nextInt();
       int[] array =  new int[length];
       for (int i = 0; i < length; i++) {
           array[i] = scanner.nextInt();
       }

       //your code goes here
       int sum = 0;
       for (int x = 0; x < length; x++) {
           if (array[x]%4==0) {
               sum += array[x];
           }
       }
       System.out.println(sum); // 입력 값 중 4의 배수인 숫자의 합
   }
}

------------------------------------------------

enchanced_for_loop

향상된 for 루프 ( "for each" 루프라고도 함)는 배열의 요소를 탐색하는 데 사용됩니다.
장점은 버그 가능성을 제거하고 코드를 읽기 쉽게 만든다는 것입니다.
예시:

public class Program {
    public static void main(String[] args) {
        int[ ] primes = {2, 3, 5, 7};
        
        for (int t: primes) {
            System.out.println(t);
	/*
	2
	3
	5
	7
	*/
        }
    }
}

향상된 for 루프 는 액세스되는 배열의 요소와 호환되는 유형의 변수를 선언합니다 . 변수는 for 블록 내에서 사용할 수 있으며 해당 값은 현재 배열 요소와 동일합니다.
따라서 루프의 각 반복에서 변수 t 는 배열의 해당 요소와 동일합니다.

예문:

import java.util.Scanner;

public class Main {

   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       int length = scanner.nextInt();
       int[] sides =  new int[length];
       for (int i = 0; i < length; i++) {
           sides[i] = scanner.nextInt();
       }
      //your code goes here
        for (int t: sides) {
            System.out.println(t * t);
        }
   }
}

-----------------------------------------------

multidimensional Arrays 다차원 배열

다차원 배열은 다른 배열을 포함하는 배열입니다. 2차원 배열은 가장 기본적인 다차원 배열입니다.
다차원 배열을 만들려면 각 배열을 고유한 중괄호 세트 안에 넣으십시오.
2차원 배열의 예:

int[ ][ ] sample = { {1, 2, 3}, {4, 5, 6} }; 

이것은 두 개의 배열을 요소로 포함하는 배열을 선언합니다.
2차원 배열의 요소에 액세스하려면 두 개의 인덱스를 제공하십시오. 하나는 배열용이고 다른 하나는 해당 배열 내부의 요소용입니다.
다음 예제에서는 두 번째 샘플 배열의 첫 번째 요소에 액세스합니다.
예시:

public class Program {
    public static void main(String[] args) {
        int[ ][ ] sample = { {1, 2, 3}, {4, 5, 6} }; 
        int x = sample[1][0];
        System.out.println(x); // 4 , 두번째 배열의 첫번째 요소
    }
}

배열의 두 인덱스를 행 인덱스 및 열 인덱스 라고 합니다.

동일한 대괄호 쌍을 사용하여 다차원 배열의 요소를 가져오고 설정할 수 있습니다.
예시:

public class Program {
    public static void main(String[] args) {
        int[ ][ ] myArr = { {1, 2, 3}, {4}, {5, 6, 7} };
        myArr[0][2] = 42; // 2 에서 42 로 수정
        int x = myArr[1][0];
        
        System.out.println(x); // 4
    }
}

위의 2차원 배열은 3개의 배열을 포함합니다. 첫 번째 배열에는 세 개의 요소가 있고 두 번째 배열에는 단일 요소가 있으며 마지막 배열에는 세 개의 요소가 있습니다.

Java에서는 2차원 배열에만 국한되지 않습니다. 배열은 프로그램이 필요로 하는 만큼 많은 수준으로 배열 내에 중첩될 수 있습니다. 2차원 이상의 배열을 선언할 때 필요한 만큼 빈 대괄호 세트를 추가하기만 하면 됩니다. 그러나 이것들은 유지하기가 더 어렵습니다.
모든 배열 구성원은 동일한 유형이어야 한다는 점을 기억하십시오.

예문:

public class Main {
   public static void main(String[] args) {
       int[][] matrix = {
               {8, 1, 6},
               {3, 5, 7},
               {4, 9, 0},
       };
       //output the numbers
       for (int x=0; x<3; x++) {
           for (int y=0; y<3; y++) {
               int z = matrix[x][y];
               System.out.println(z);
           }
       }
   }
}

--------------------------------------

문제:

문자열 반전


문자열을 입력받아 역으로 출력하는 프로그램을 작성하세요.
주어진 코드는 문자열을 입력으로 받아 문자열의 문자를 요소로 포함하는 char 배열로 변환합니다.

샘플 입력:
hello there

샘플 출력:
ereth olleh

배열의 크기를 가져오기 위해 arr.length를 사용하여 끝에서 시작하여 char 배열을 반복할 수 있습니다.

import java.util.Scanner;

public class Program
{
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		String text = scanner.nextLine();
		char[] arr = text.toCharArray();
		
		//your code goes here
		for (int x = 0; x<arr.length; x++) {
			System.out.println(arr[arr.length-1-x]);
		}
	}
}