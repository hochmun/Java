Object-Orientation 객체 지향

Java는 프로그래밍에 대한 생각을 현실 세계에 대한 생각에 더 가깝게 만들기 위한 프로그래밍 스타일인 OOP(Object-Oriented Programming 객체 지향 프로그래밍 ) 를 사용 합니다 . OOP에서 각 개체는 실제 세계의 개체와 마찬가지로 고유한 ID(unique identity) 를 가진 독립적인 단위입니다 .

사과는 객체입니다. 머그도 마찬가지입니다. 각각은 고유한 정체성 을 가지고 있습니다. 동일하게 보이지만 여전히 별개의 고유한 개체인 두 개의 머그를 가질 수 있습니다.

또한 객체에는 이를 설명하는 데 사용되는 특성(characteristics) 이 있습니다.
예를 들어, 자동차는 빨간색이나 파란색일 수 있고, 머그는 가득 차거나 비어 있을 수 있습니다. 이러한 특성을 속성(attributes) 이라고도 합니다 . 속성은 개체의 현재 상태를 설명합니다.
현실 세계에서 각 개체는 고유한 방식으로 동작합니다. 차가 움직이고, 전화벨이 울리는 등.
객체에도 동일하게 적용됩니다. 동작(behavior) 은 객체 유형에 따라 다릅니다.

요약하면, 객체 지향 프로그래밍에서 각 객체는 세 가지 차원( identity , attributes , behavior )을 가 집니다.
속성은 개체의 현재 상태를 설명하고 개체가 수행할 수 있는 작업은 개체의 동작을 통해 표시됩니다.

클래스(class) 는 객체가 무엇인지 설명하지만 객체 자체와는 별개입니다.
즉, 클래스는 객체에 대한 청사진, 설명 또는 정의로 설명될 수 있습니다. 여러 객체를 생성하기 위한 청사진과 동일한 클래스를 사용할 수 있습니다. 첫 번째 단계는 클래스를 정의하는 것입니다. 클래스는 객체 생성을 위한 청사진이 됩니다. 각 클래스에는 이름이 있으며 각각은 속성(attributes) 과 동작(behavior) 을 정의하는 데 사용됩니다 . 

--------------------------------------
Methods 메소드

메서드는 동작을 정의 합니다. 메소드는 작업을 수행하기 위해 함께 그룹화되는 명령문의 모음입니다. System.out.println()은 메서드의 예입니다.
원하는 작업을 수행하기 위해 고유한 방법을 정의할 수 있습니다.
다음 코드를 고려해 보겠습니다.

class MyClass {
    static void sayHello() {
        System.out.println("Hello World!");
    }
    public static void main(String[ ] args) {
        sayHello(); // Hello World! 출력
    }
}

위의 코드는 "sayHello"라는 메소드를 선언하는데, 이것은 텍스트를 출력한 다음 main 에서 호출됩니다 .

메서드를 호출하려면 해당 이름을 입력한 다음 이름 뒤에 일련의 괄호를 사용합니다.

필요한 만큼 메서드를 호출할 수 있습니다.
메서드가 실행될 때 코드는 메서드가 정의된 곳으로 점프하고 그 안의 코드를 실행한 다음 뒤로 돌아가서 다음 줄로 진행합니다.
예시:
class MyClass {

    static void sayHello() {
        System.out.println("Hello World!");
    }

    public static void main(String[ ] args) {
        sayHello();
        sayHello();
        sayHello();
    }

}

예문:

행동 양식


당신은 한 사람도 마주치지 않고 인사하는 로봇 "웰컴 2000"을 만들고 있습니다. 방에 들어갈 사람의 수를 입력하면 로봇이 해당 횟수만큼 "Welcome"을 외칠 것입니다.
주어진 프로그램은 이미 숫자를 입력으로 사용하고 제공된 개수에 따라 메서드를 호출합니다. 문제는 방법이 불완전하다는 것입니다. 수정합니다.

샘플 입력
2

샘플 출력
Welcome!
Welcome!

메서드 내에서 출력을 실행해야 합니다.

import java.util.Scanner;

public class Main {

   public static void main(String[] args) {
       Scanner read = new Scanner(System.in);
       int numberOfPeople = read.nextInt();
       
       for (int i = 0; i < numberOfPeople; i++) {
           welcome();
       }
   }
   public static void welcome() {
       //complete the method
       System.out.println("Welcome!");
   }
}

----------------------------------------------
메소드 매개변수 Method Parameters

또한 호출할 때 매개변수 라고 하는 일부 데이터를 가져오는 메서드를 만들 수도 있습니다 . 메서드의 괄호 안에 매개변수를 씁니다.
예를 들어 sayHello () 메서드를 수정하여 String 매개변수 를 가져와 출력할 수 있습니다 .

class MyClass {
  
    static void sayHello(String name) {
        System.out.println("Hello " + name);
    }

    public static void main(String[ ] args) {
        sayHello("David"); // Hello David
        sayHello("Amy"); // Hello Amy
    }

}

위의 메소드 는 메소드의 본문에서 사용되는 매개변수로 name 이라는 문자열을 취합니다 . 그런 다음 메서드를 호출할 때 괄호 안에 매개변수 값을 전달합니다.
메서드는 쉼표로 구분된 여러 매개변수를 사용할 수 있습니다.

간단한 명령문 대신 메서드를 사용하면 다음과 같은 이점이 있습니다.
- 코드 재사용 : 매번 코드를 다시 작성할 필요 없이 메서드를 한 번만 작성하면 여러 번 사용할 수 있습니다.
- 매개변수 : 전달된 매개변수를 기반으로 메소드는 다양한 작업을 수행할 수 있습니다.

----------------------------------------------
반환 유형 The Return Type

return 키워드는 값을 반환하는 메서드에서 사용할 수 있습니다 . 예를 들어, 두 매개변수의 합
을 반환하는 sum 이라는 메서드를 정의할 수 있습니다.

static int sum(int val1, int val2) {
   return val1 + val2;
}

메서드 정의 에서 메서드 이름을 정의하기 전에 반환 유형 을 정의했습니다. 우리의 sum 메소드의 경우 int 유형의 두 매개변수를 사용하고 그 합을 반환하기 때문에 int 입니다.

class MyClass {

    static int sum(int val1, int val2) {
        return val1 + val2;
    }

    public static void main(String[ ] args) {
        int val1 = 1;
        int x = sum(2, 5);
        System.out.println(x); // 7
        System.out.println(val1); // 1 / main에서 val1값을 1로 정의해도 sum메서드 정의에 영향을 끼치지 않는것 같음
    }
}

메서드에서 값을 반환할 필요가 없으면 void 키워드를 사용합니다 . main 메소드의 정의에서 void
키워드에 주목하십시오. 이것은 main이 아무 것도 반환하지 않는다는 것을 의미합니다.

주석을 설명하는 이전 수업의 동일한 코드를 살펴보고 어떻게 작동하는지 더 잘 이해할 수 있습니다.

// returns an int value 5
static int returnFive() {
  return 5;
}

// has a parameter
static void sayHelloTo(String name) {
  System.out.println("Hello " + name);
}

// simply prints"Hello World!"
static void sayHello() {
  System.out.println("Hello World!");
}

메서드 반환 유형 및 매개 변수에 대한 지식을 얻었으니 기본 메서드의 정의를 다시 살펴보겠습니다.

public static void main(String[ ] args)

이 정의는 기본 메서드가 문자열 배열을 매개 변수로 사용하고 값을 반환하지 않음을 나타냅니다.

int 유형의 두 매개변수를 사용 하고 더 큰 매개변수를 반환 하는 메서드를 만든 다음 main 에서 호출해 보겠습니다 .

class Program {

    public static void main(String[ ] args) {
        int res = max(7, 42);
        System.out.println(res); // 42
    }

    static int max(int a, int b) {
        if(a > b) {
          return a;
        }
        else {
            return b;
        }
    }

}

메서드는 한 가지 유형의 매개변수(또는 매개변수)를 가질 수 있고 다른 유형을 반환할 수 있습니다. 예를 들어 두 개의 double을 사용하고 int를 반환할 수 있습니다.

예문:
메서드 반환 유형


당신은 유명 인사들이 춤을 추고 4명의 심사 위원이 그들의 연기를 평가하고 1에서 10 사이의 점수를 주는 TV 쇼의 조수입니다.
주어진 프로그램은 점수를 입력으로 사용합니다.
메소드를 완료하여 매개변수로 받은 다음 평균 점수를 계산하여 반환합니다.

샘플 입력
6.0
4.0
5.0
3.0

샘플 출력
4.5

평균 점수를 계산하려면 모든 점수를 더한 다음 점수가 몇 개인지를 나눕니다.

import java.util.Scanner;

public class Main {

   public static void main(String[] args) {
       Scanner read = new Scanner(System.in);
       double score1 = read.nextDouble();
       double score2 = read.nextDouble();
       double score3 = read.nextDouble();
       double score4 = read.nextDouble();
       double avgScore = getAverageScore(score1, score2, score3, score4);
       System.out.println(avgScore);
   }
   //create your method here
   public static double getAverageScore(double a , double b , double c , double d) {
       return (a+b+c+d)/4;
   }
}

-----------------------------------------------
클래스 생성 Creating Classes

사용자 정의 개체를 생성하려면 먼저 해당 클래스를 생성해야 합니다. Eclipse에서 src 폴더 를 마우스 오른쪽 버튼으로 클릭 하고 Create->New->Class를 선택하면 됩니다. 클래스 이름을 지정하고 Finish 를 클릭하여 프로젝트에 새 클래스를 추가합니다.

보시다시피 Eclipse는 이미 클래스의 초기 코드를 추가했습니다.
이제 새 클래스에서 간단한 메서드를 만들 수 있습니다.
Animal.java

public class Animal {
  void bark() {
    System.out.println("woof-woof");
  }
}

Animal 클래스 에서 bark() 메서드를 선언했습니다 .

이제 클래스와 해당 메서드를 사용하려면 해당 클래스의 개체 를 선언해야 합니다 .

메인 으로 가서 클래스의 새로운 객체를 생성해 봅시다 .
MyClass.java

public class Animal {
    void bark() {
        System.out.println("Woof-Woof");
    }
}

class MyClass {
    public static void main(String[ ] args) {
        Animal dog = new Animal();
        dog.bark();
    }
}

이제 dog 는 Animal 유형의 객체입니다 . 따라서 우리는 객체의 이름과 점 을 사용하여 그 나무 껍질 () 메서드 를 호출할 수 있습니다 . 점 표기법 은 객체의 속성 과 메서드 에 액세스하는 데 사용됩니다 .

예문:

클래스 및 객체 생성

응용 프로그램 사용자에게 로드 메시지를 표시하는 프로그램을 만듭니다.
LoadingMessage()라는 공용 메서드가 하나 있는 Loading 클래스를 정의합니다. 이 메서드는 호출될 때 "Loading"을 인쇄해야 합니다.
loading이라는 개체를 만들고 해당 메서드를 호출합니다.

객체를 생성하는 동안 new 키워드를 사용하는 것을 잊지 마십시오.

public class Main {
   public static void main(String[] args) {
       
       //create a Loading object with the same name
       Loading loading = new Loading();
       
       loading.LoadingMessage(); // Loading
   }
}

class Loading {
     //complete the class, add LoadingMessage() method
     void LoadingMessage() {
         System.out.println("Loading");
     }
}

--------------------------------------------
속성 정의 Defining Attributes

클래스에는 속성attributes 과 메서드methods 가 있습니다. 속성은 기본적으로 클래스 내의 변수입니다. 해당 속성과 메서드를 사용하여 Vehicle
이라는 클래스를 만들어 보겠습니다 .

public class Vehicle {
  int maxSpeed;
  int wheels;
  String color;
  double fuelCapacity;  // 연료용량

  void horn() {
    System.out.println("Beep!");
  }  
}

maxSpeed ​​, wheel , color 및 fuelCapacity 는 Vehicle 클래스의 속성이며 horn() 은 유일한 메서드입니다.

다음으로, Vehicle 클래스의 여러 개체를 만들고 점 구문을 사용하여 속성과 메서드에 액세스할 수 있습니다.

public class Vehicle {
    int maxSpeed;
    int wheels;
    String color;
    double fuelCapacity;  
    
    void horn() {
        System.out.println("Beep!");
    }
}

class MyClass {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        Vehicle v2 = new Vehicle();
        v1.color = "red";
        v2.horn(); // 출력 Beep!
        System.out.println(v1.color); // 출력 red
    }
}

예문:
클래스 속성

당신은 호텔의 관리자이며 새 고객을 위한 고객 정보 카드를 만들어야 합니다. 카드에 고객의 이름과 성, 나이, 객실 번호를 기록해야 합니다.
당신에게 주어진 프로그램은 손님의 데이터(이름, 성, 나이, 방 번호)를 입력으로 받습니다.
saveCustomerInfo() 메소드가 올바르게 작동하도록 해당 속성을 추가하여 클래스를 완료하십시오. 또한 생성된 개체의 속성에 가져온 데이터 값을 할당합니다.

Sample Input
John
Smith
35
204

Sample Output
First name: John
Second name: Smith
Age: 35
Room number: 204

속성에 대한 올바른 데이터 유형을 설정하는 데 주의하십시오.

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner read = new Scanner(System.in);
       String firstName = read.nextLine();
       String secondName = read.nextLine();
       int age = read.nextInt();
       int roomNumber = read.nextInt();
       Customer customer = new Customer();
       //set customer's data to object here
       customer.firstName = firstName;
       customer.secondName = secondName;
       customer.age = age;
       customer.roomNumber = roomNumber;
       customer.saveCustomerInfo();
   }
}
class Customer {
   //add all necessary attributes here
   String firstName;
   String secondName;
   int age;
   int roomNumber;
   public void saveCustomerInfo() {
       System.out.println("First name: " + firstName);
       System.out.println("Second name: " + secondName);
       System.out.println("Age: " + age);
       System.out.println("Room number: " + roomNumber);
   }
}

---------------------------------------------
액세스 수정자 Access Modifiers

이제 main 메서드 앞에 있는 public 키워드에 대해 알아보겠습니다.

public static void main(String[ ] args)

public 은 액세스 수정자 이며, 이는 액세스 수준을 설정하는 데 사용됨을 의미합니다. 클래스, 속성 및 메서드에 대한 액세스 한정자를 사용할 수 있습니다. 클래스의 경우 사용 가능한 수정자는 아래에 설명된 대로 public 또는 default(비워둠)입니다. 

public : 클래스는 다른 클래스에서 액세스할 수 있습니다. 
default : 클래스는 같은 패키지의 클래스만 접근할 수 있습니다. 

속성 및 메소드에 대해 다음 선택 사항을 사용할 수 있습니다. 

default : 액세스 제어 수정자 없이 선언된 변수 또는 메소드는 동일한 패키지의 다른 클래스에서 사용할 수 있습니다. 
public : 다른 모든 클래스에서 액세스할 수 있습니다.

protected: 서브클래스가 슈퍼클래스의 보호된 메소드와 변수에 액세스할 수 있다는 추가와 함께 기본 액세스 수정자와 동일한 액세스를 제공합니다(서브클래스와 슈퍼클래스는 다음 단원에서 다룹니다).
private : 선언된 클래스 자체 내에서만 액세스할 수 있습니다.

예시:
public class Vehicle {
  private int maxSpeed;
  private int wheels;
  private String color;
  private double fuelCapacity;

  public void horn() {
    System.out.println("Beep!");
  }
}

클래스 내에서 변수를 비공개로 유지하는 것이 가장 좋습니다. 변수는 Getters 및 Setters 를 사용하여 액세스하고 수정할 수 있습니다 . 계속
을 눌러 Getters 및 Setters에 대해 알아보세요.

예문:
당신은 여행 매니저이고 수도와 함께 국가 목록이 필요합니다.
Country 개체를 생성하는 프로그램이 제공되고 이름과 대문자를 출력해야 하지만 문제가 발생합니다

필요한 출력을 수행하려면 국가 클래스 필드의 액세스 수정자를 변경하십시오.

public access modifier를 사용하여 다른 클래스에 대한 액세스를 제공합니다.

public class Program {
	public static void main(String[] args) {
	    Country c = new Country();
	    c.name = "France";
	    c.capital = "Paris";
	    System.out.println("Country:  " + c.name);
	    System.out.println("Capital:  " + c.capital);
	}		
}
public class Country{
    //change the code below
    String name;
    String capital;
}

---------------------------------------------------
게터 및 세터 Getters & Setters

Getters및 Setters는 특히 클래스를 생성할 때 데이터를 효과적으로 보호하는 데 사용됩니다. 
각 변수에 대해 get 메서드는 값을 반환하고 set 메서드는 값을 설정합니다. 
Getters는 get 으로 시작하고 그 뒤에 변수 이름이 오고 변수 이름의 첫 글자는 대문자로 표시됩니다. 
Setters는 set 으로 시작하고 그 뒤에 변수 이름이 오고 변수 이름의 첫 글자는 대문자입니다. 

예시:
public class Vehicle {
  private String color;

  // Getter
  public String getColor() {
    return color;
  }

 // Setter
  public void setColor(String c) {
    this.color = c;
  }
}

getter 메서드 는 속성 값을 반환합니다. setter
메소드 는 매개변수를 가져와 속성에 할당합니다.

this 키워드 는 현재 개체를 참조하는 데 사용됩니다. 기본적으로 this.color 는 현재 개체 의 색상 속성입니다.

getter와 setter가 정의되면 메인 에서 사용할 수 있습니다.

public class Vehicle {
    private String color;
    
    // Getter
    public String getColor() {
        return color;
    }
    
    // Setter
    public void setColor(String c) {
        this.color = c;
    }
}

class Program {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        v1.setColor("Red");
        System.out.println(v1.getColor()); // Red
    }
}

Getter와 Setter를 사용하면 값을 제어할 수 있습니다. 예를 들어 실제로 값을 설정하기 전에 setter에서 주어진 값의 유효성을 검사할 수 있습니다.

getter와 setter는 다음 모듈에서 다룰 캡슐화 의 기본 빌딩 블록입니다.

예문:
당신에게 주어진 프로그램은 입력으로 학생의 이름과 나이를 받습니다.
프로그램을 완성하여 Student 클래스의 해당 속성에 대한 값을 설정하고 최종 결과를 출력합니다. age가 <0이면 프로그램은 "Invalid age"를 출력하고 age 속성에 0 값을 할당해야 합니다.

Sample Input
Olivia
-2

Sample Output
Invalid age
Name: Olivia
Age: 0

-2는 age 속성에 대한 잘못된 값이므로 "Invalid age" 및 "Age: 0"이 인쇄됩니다. Setter와 Getter는 이것을 처리해야 합니다.
Getter와 Setter 내부의 조건을 처리해야 합니다.

import java.util.Scanner;

class Main {

   public static void main(String[] args) {
       Scanner read = new Scanner(System.in);
       String name = read.nextLine();
       int age = read.nextInt();
       Student student = new Student();
       student.name = name;      
       student.setAge(age);//set the age via Setter              
       System.out.println("Name: " + student.name);
       System.out.println("Age: " + student.getAge());
   }
}

class Student {

   public String name;
   private int age;
   
   public int getAge() {
       return age;//complete Getter       
   }
   public void setAge(int age) {
       if (age<0) {
           System.out.println("Invalid age");
           this.age = 0;
       }
       else {
           this.age = age;
       }//complete Setter       
   }
}

--------------------------------------------
생성자 Constructors

생성자Constructors 는 객체가 생성될 때 호출되고 초기화하는 데 사용되는 특수 메서드입니다.
생성자를 사용하여 개체 속성에 대한 초기 값을 제공할 수 있습니다. 
- 생성자 이름은 클래스 이름과 동일해야 합니다. 
- 생성자는 명시적 반환 유형이 없어야 합니다. 

생성자의 예:
public class Vehicle {
  private String color;
  Vehicle() {
     color = "Red";
  }
}

Vehicle () 메서드는 우리 클래스 의 생성자이므로 해당 클래스의 객체가 생성될 때마다 color 속성이 "Red"로 설정됩니다.
생성자는 속성을 초기화하기 위해 매개변수를 사용할 수도 있습니다.

public class Vehicle {
  private String color;
  Vehicle(String c) {
    color = c;
  }
}

생성자를 기본적으로 클래스를 설정하는 메서드로 생각할 수 있으므로 매번 같은 코드를 반복할 필요가 없습니다.

생성자는 new 키워드 를 사용하여 객체를 생성할 때 호출됩니다 .

예시:
public class MyClass {
  public static void main(String[ ] args) {
    Vehicle v = new Vehicle("Blue");
  }
}

이렇게 하면 색상 속성을 "Blue"로 설정하는 생성자가 호출됩니다 .

단일 클래스에는 매개변수 수가 다른 여러 생성자가 있을 수 있습니다.
생성자 내부의 setter 메서드를 사용하여 속성 값을 설정할 수 있습니다. 

예시:
public class Vehicle {
  private String color;

  Vehicle() {
    this.setColor("Red");
  }
  Vehicle(String c) {
    this.setColor(c);
  }

  // Setter
  public void setColor(String c) {
    this.color = c;
  }
}

위의 클래스에는 두 개의 생성자가 있습니다. 하나는 color 속성을 기본값 "Red"로 설정하는 매개변수가 없고 다른 하나는 매개변수를 받아 속성에 할당하는 생성자입니다. 

이제 생성자를 사용하여 클래스의 개체를 만들 수 있습니다.

예시:
public class Vehicle {
    private String color;
    
    Vehicle() {
        this.setColor("Red");
    }
    Vehicle(String c) {
        this.setColor(c);
    }
    
    // Setter
    public void setColor(String c) {
        this.color = c;
    }
    
    // Getter
    public String getColor() {
        return color;
    }
}

public class Program {
    public static void main(String[] args) {        
        //color will be "Red"
        Vehicle v1 = new Vehicle();
        
        //color will be "Green"
        Vehicle v2 = new Vehicle("Green"); 
        
        System.out.println(v2.getColor());
    }
}

Java는 자동으로 기본 생성자를 제공하므로 구체적으로 정의되었는지 여부에 관계없이 모든 클래스에는 생성자가 있습니다.

예문:
당신의 친구는 영화관의 계산원입니다.
그는 당신이 훌륭한 자바 개발자라는 것을 알고 있기 때문에 그를 도와주고 영화 제목, 행 및 좌석 정보를 얻고 새 티켓을 인쇄하는 프로그램을 만들어달라고 요청했습니다.
올바르게 초기화될 수 있도록 티켓 클래스에 생성자를 추가하여 기존 코드를 완성하십시오.

Sample Input
Jaws
5
1

Sample Output
Movie: Jaws
Row: 5
Seat: 1

입력되는 데이터의 유형을 보면 생성자 매개변수를 파악할 수 있습니다.

import java.util.Scanner;

class Main {
   public static void main(String[] args) {
       Scanner read = new Scanner(System.in);
       String movie = read.nextLine();
       int row = read.nextInt();
       int seat = read.nextInt();
       Ticket ticket = new Ticket(movie, row, seat);
       System.out.println("Movie: " + ticket.getMovie());
       System.out.println("Row: " + ticket.getRow());
       System.out.println("Seat: " + ticket.getSeat());
   }
}

class Ticket {
   private String movie;
   private int row;
   private int seat;

   //complete the constructor
   public Ticket(String movie,int row,int seat) {
       this.movie = movie;
       this.row = row;
       this.seat = seat;
   }
    //getter
   public String getMovie() {
       return movie;
   }

   public int getRow() {
       return row;
   }

   public int getSeat() {
       return seat;
   }
}

----------------------------------------
값 유형 Value Types

값 유형Value types 은 기본 유형이며 byte, short, int, long, float, double, boolean 및 char를 포함합니다.
이러한 데이터 유형은 해당 메모리 위치에 할당된 값을 저장합니다.
따라서 메서드에 전달할 때 기본적으로 변수 자체가 아니라 변수의 값 에 대해 작업합니다.

예시:
public class MyClass {
    public static void main(String[ ] args) {
        int x = 5;
        addOneTo(x);
        System.out.println(x);       
    }

    static void addOneTo(int num) {
        num = num + 1;
    }
}

위 예제의 메서드는 매개변수의 값 을 취하므로 원래 변수는 영향을 받지 않고 5가 값으로 유지됩니다.

참조 유형reference type 은 해당 데이터가 저장된 메모리 위치에 대한 참조(또는 주소)를 저장합니다 .
생성자를 사용하여 객체를 생성할 때 참조 변수를 생성합니다.
예를 들어 Person 클래스를 정의하는 것을 고려하십시오.

예시:
public class MyClass {
    public static void main(String[ ] args) {
        Person j;
        j = new Person("John");
        j.setAge(20);
        celebrateBirthday(j);
        System.out.println(j.getAge()); // 21
  }

    static void celebrateBirthday(Person p) {
        p.setAge(p.getAge() + 1);
    }
}

public class Person {
    private String name;
    private int age;
    
    Person (String n) {
        this.name = n;
    }
    
    public int getAge() {
        return age;
    }
    
    public void setAge(int a) {
        this.age = a;
    }
}

CelebrationBirthday 메소드 는 Person 객체를 매개변수로 사용하고 해당 속성을 증가시킵니다.
j 는 참조 유형 이기 때문에 메서드는 개체 자체에 영향을 미치며 해당 속성의 실제 값을 변경할 수 있습니다.

배열Arrays 과 문자열Strings 도 참조 데이터 유형입니다.

------------------------------------
